defmodule Kubereq do
  @moduledoc """
  Kubereq enables you to create resource scoped Kubernetes clients using `Req`.
  When `use`-d, this module injects a `req/1` function into your module which
  builds the `%Req.Request{}` struct that can be used to call the funcitons
  defined by `Kubereq.Client`.

  In order to build the `%Req.Request{}` struct, this library makes use of
  `Pluggable` and `Kubeconf` libraries. Your module is expected to declare the
  `step`s required to build the `%Kubeconf{}` struct.

  Instead of using this module directly, consider using
  [`Kubegen`](https://github.com/mruoss/kubegen) to generate your API clients.

  ### Examples

  The following is a simple, incomplete example for a Client interacting
  with ConfigMaps. This code is an extraction of what is generated by
  [`Kubegen`](https://github.com/mruoss/kubegen) when generating a client for
  ConfigMaps.

      defmodule MyApp.K8sClient.Core.V1.ConfigMap do
        use Kubereq

        @resource_path "api/v1/namespaces/:namespace/configmaps/:name"
        @resource_list_path "api/v1/namespaces/:namespace/configmaps"

        step Kubeconf.ENV
        step Kubeconf.File, path: ".kube/config", relative_to_home?: true
        step Kubeconf.ServiceAccount

        def get(namespace, name) do
          Kubereq.Client.get(req(), @resource_path, namespace, name)
        end

        def list(namespace, opts \\ []) do
          Client.list(req(), @resource_list_path, namespace, opts)
        end
      end
  """
  alias Kubereq.Step

  defmacro __using__(_opts) do
    quote do
      use Pluggable.StepBuilder

      def req(opts \\ []) do
        %Kubeconf{}
        |> Pluggable.run([{__MODULE__, nil}])
        |> Kubereq.req(opts)
      end
    end
  end

  @spec req(Kubeconf.t(), keyword()) :: Req.Request.t()
  def req(kubeconfig, opts) do
    Req.new()
    |> Req.Request.register_options([:kubeconfig])
    |> Step.Exec.attach()
    |> Step.FieldSelector.attach()
    |> Step.LabelSelector.attach()
    |> Step.Compression.attach()
    |> Step.TLS.attach()
    |> Step.Auth.attach()
    |> Step.Impersonate.attach()
    |> Step.BaseUrl.attach()
    |> Req.merge(opts)
    |> Req.merge(kubeconfig: kubeconfig)

    # |> Req.Request.append_request_steps(debug: &dbg/1)
  end
end
